// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  output   = "./json-schema"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = "postgresql://root:V7xDkuzNePo7KG7HKlW5JBst@luca.iran.liara.ir:32033/postgres"
}

enum requestStatus {
  accepted
  pending
  denied
}
enum RealEstateType {
  specialSale
  common
}

enum role {
  admin
  agencyOwner
  agencyAgent
  normal
}

enum assignmentType {
  rental
  forSale
  fastSale
  special
}

enum propertyType {
  c //commercial
  a //apartment
  v //villaGarden
  l //land
  i //independents
}

enum roomCount {
  one
  two
  three
  four
  five
}

enum meter {
  m10
  m90
  m150
  m220
}

enum AdStatus {
  awaitingPayment
  awaitingConfirmation
  active
  expired
  Deleted
}

model tempUser {
  id               String @id @unique @default(cuid())
  phoneNumber      String @unique
  verificationCode String
}

model user {
  id            String                  @id @unique @default(cuid())
  firstName     String?
  lastName      String?
  name          String?
  email         String?
  phoneNumber   String                  @unique
  nationalCode  Int?
  postalCode    Int?
  address       String?
  userImage     String?
  nationalImage String?
  lastLogin     DateTime                @default(now())
  role          role                    @default(normal)
  agency        agency[]
  agentOf       agentInterface[]
  agencyRate    agencyRatingInterface[]
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @default(now()) @updatedAt
  isActive      Boolean                 @default(true)
  realEstate    realEstate[]
  // AgencyRequest agencyRequest[]
  article       article[]
  note          note[]
  save          save[]
  report        report[]
}

model agencyRatingInterface {
  id        String   @id @unique @default(cuid())
  user      user?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    String?
  agency    agency?  @relation(fields: [agencyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  agencyId  String?
  rate      Int
  createdAt DateTime @default(now())
}

model agentInterface {
  id        String   @id @unique @default(cuid())
  user      user     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    String
  agency    agency   @relation(fields: [agencyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  agencyId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isActive  Boolean  @default(false)
  // @@id([userId, agencyId])
}

model agency {
  id              String                  @id @unique @default(cuid())
  name            String?
  agencyImage     String?
  businessIdImage String?
  owner           user                    @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ownerId         String
  city            city                    @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cityId          String
  cityArea        cityArea                @relation(fields: [cityAreaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cityAreaId      String
  agents          agentInterface[]
  rate            agencyRatingInterface[]
  phoneNumber     String                  @unique
  businessId      String?
  latitude        String?
  longitude       String?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @default(now()) @updatedAt
  isActive        Boolean                 @default(false)
  RealEstate      realEstate[]
  status          requestStatus           @default(pending)
}

model city {
  id         String       @id @unique @default(cuid())
  name       String
  cityArea   cityArea[]
  realEstate realEstate[]
  agency     agency[]
  createdAt  DateTime     @default(now())
}

model cityArea {
  id         String       @id @unique @default(cuid())
  name       String
  city       city         @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cityId     String
  agency     agency[]
  realEstate realEstate[]
  createdAt  DateTime     @default(now())
}

model realEstate {
  id             String         @id @unique @default(cuid())
  agency         agency?        @relation(fields: [agencyId], references: [id])
  agencyId       String?
  user           user?          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String?
  name           String
  phoneNumber    String
  description    String
  address        String?
  roomCount      roomCount      @default(one)
  meter          Int          
  estateImage    String?
  assignmentType assignmentType @default(rental)
  type           propertyType   @default(c)
  price          BigInt
  city           city           @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cityId         String
  cityArea       cityArea       @relation(fields: [cityAreaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cityAreaId     String
  latitude       String?
  longitude      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  isActive       Boolean        @default(false)
  AdStatus       AdStatus       @default(awaitingConfirmation)
  note           note[]
  save           save[]
  report         report[]
  gallery        gallery[]
  expirationDate DateTime?       @default(now())
  realEstateType RealEstateType @default(common)
  // @@index([cityName, areaName, roomCount, price(sort: Asc), type, createdAt(sort: Asc)])
}

model article {
  id           String   @id @unique @default(cuid())
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  title        String
  summary      String?
  text         String
  normalName   String?
  articleImage String?
  createdAt    DateTime @default(now())
}

model contactFrom {
  id          String   @id @unique @default(cuid())
  fullName    String
  email       String
  title       String
  description String
  createdAt   DateTime @default(now())
}

model faq {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model note {
  id           String      @id @unique @default(cuid())
  user         user        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  note         String
  realEstate   realEstate? @relation(fields: [realEstateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  realEstateId String?
  createdAt    DateTime    @default(now())
}

model save {
  id           String     @id @unique @default(cuid())
  user         user       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  realEstate   realEstate @relation(fields: [realEstateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  realEstateId String
  createdAt    DateTime   @default(now())
}

model report {
  id           String      @id @unique @default(cuid())
  user         user?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String?
  report       String
  realEstate   realEstate? @relation(fields: [realEstateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  realEstateId String?
  createdAt    DateTime    @default(now())
}

model gallery {
  id           String      @id @unique @default(cuid())
  Photos       String
  realEstate   realEstate? @relation(fields: [realEstateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  realEstateId String?
  createdAt    DateTime    @default(now())
}

model setting {
  id                                    String @id @unique @default(cuid())
  priceFilters                          priceFilter[]
  surfaceFilters                        surfaceFilter[]
  message                               String?
  maximumDailyRealEstatesForClient      Int?
  maximumDailyRealEstatesForAgency      Int?
  maximumDailyRealEstatesForAgentOfAgencies Int?
  maximumNumberOfRooms Int? @default(5)
  createdAt                             DateTime @default(now())
}

model surfaceFilter {
  id              String @id @unique @default(cuid())
  minValue        Int
  maxValue        Int
  setting         setting @relation(fields: [settingId], references: [id])
  settingId       String
  createdAt       DateTime @default(now())
}
model priceFilter {
  id              String @id @unique @default(cuid())
  minValue        BigInt
  maxValue        BigInt
  setting         setting @relation(fields: [settingId], references: [id])
  settingId       String
  createdAt       DateTime @default(now())
}
